#########################
kubectl get services
#lists all the installations that we have done using helm
helm ls
#########################

#############
#'helm search': Finding Charts
helm search hub wordpress

#add the bitnami repo to the local helm
helm repo add bitnami https://charts.bitnami.com/bitnami

#'helm install': Installing a Package
helm install happy-panda bitnami/wordpress

# To access your WordPress site from outside the cluster,
# Get the WordPress URL by running these commands
#In powershell:
$SERVICE_IP = (kubectl get svc --namespace default happy-panda-wordpress --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
echo "WordPress URL: http://$SERVICE_IP/"
echo "WordPress Admin URL: http://$SERVICE_IP/admin"

#to get the username:
echo Username: user

#to get the password: (current password: 03wkYUxsyy)
$encodedPassword = kubectl get secret --namespace default happy-panda-wordpress -o jsonpath="{.data.wordpress-password}"
[System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($encodedPassword))
#############

##################
#to get the helm data 
helm env
#all the helm charts will be saved in "HELM_CACHE_HOME"
##################

##########
helm ls
helm uninstall <helm_chart_name>
##########

#####################

#cd to the folder where you want to create your helm chart
helm create <a_helm_chart_name>

#(To create my custome helm chart)
#i deleted all the files in the templates folder, 
#deleted all the data in the values.yaml file,
#and maintained a different appVersion in the Chart.yaml file.
#added the .yaml files from https://github.com/eazybytes/microservices/tree/3.3.2/section_16/helm/eazybank-common/templates
#####################


###########
#created a new folder eazybank-services
#cd to the folder
helm create accounts
#i deleted all the files in the templates folder,
#deleted all the data in the values.yaml file,
#and maintained a different appVersion in the Chart.yaml file.
#added the dependencies in Chart.yaml file (eazybank-common).
#refrenced the common.deployment template in deployment.yaml
#refrenced the common.service template in service.yaml
#added the required data to the values.yaml file
#This will compile helm chart accounts and try to compile all the dependent helm charts and place them in the chart folder
helm dependencies build
###########

#######################
#created an environments folder
#cd into the environments folder

helm create dev-env

#i deleted all the files in the templates folder,
#deleted all the data in the values.yaml file,
#and maintained a different appVersion in the Chart.yaml file.
#added the dependencies in Chart.yaml file 
#refrenced the common.configmap template in configmap.yaml
#added the required data to the values.yaml file
#This will compile helm chart accounts and try to compile all the dependent helm charts and place them in the chart folder
helm dependencies build
#######################

###########To get the kubernetes manifest files that are generated by the helm chart###########
#cd into your helm folder (dev-env this time)
helm template .

###########

######################KEYCLOAK with bitnami helm chart######################
#Downloaded all the bitnami helm charts from https://github.com/bitnami/charts
#copied the keycloak helm chart folder to my helm folder
#in values.yaml changed the service to LoadBalancer
#in values.yaml set the adminPassword to password

#CD into the keycloak folder
helm dependencies build
#CD into the helm folder (outer folder)
helm install keycloak keycloak

#to get the URL and port (in powershell):
$env:HTTP_SERVICE_PORT = (kubectl get --namespace default -o jsonpath="{.spec.ports[?(@.name=='http')].port}" services keycloak)
$env:SERVICE_IP = (kubectl get svc --namespace default keycloak -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
echo "http://$env:SERVICE_IP:$env:HTTP_SERVICE_PORT/"

#to get the username and password (in powershell):
$adminPasswordEncoded = kubectl get secret --namespace default keycloak -o jsonpath="{.data.admin-password}"
$adminPassword = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($adminPasswordEncoded))
echo "Username: user"
echo "Password: $adminPassword"

#current URL http://localhost/
#current username: user
#current password: password
######################

#########Connect to keycloak-postgresql#########

#From values.yaml get the Username, Database
#to get the password:
#List Secrets in the Namespace
kubectl get secrets -n <NAMESPACE>
#Get the Secret
kubectl get secret <SECRET_NAME> -n <NAMESPACE> -o yaml
#decode the password (powershell)
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("PASSWORD"))

#use port-forwarding to connect to the database with DBeaver
kubectl port-forward --namespace default svc/keycloak-postgresql 5444:5432

#########

######################KAFKA with bitnami helm chart######################
#copied the kafka helm chart folder to my helm folder
#in values.yaml set the replicaCount to 1
#in values.yaml changed the SASL_PLAINTEXT protocol to PLAINTEXT (in 4 places)(To reduce the security)

#CD into the kafka folder
helm dependencies build
#CD into the helm folder (outer folder)
helm install kafka kafka

######################



######################PROMETHEUS with bitnami helm chart######################
#copied the kube-prometheus helm chart folder to my helm folder
#to scrape the metrics from the microservices inside the kubernetes cluster
#in values.yaml for additionalScrapeConfigs:
    enabled: true
    type: internal

#added the internal jobList as we need to provide the details of our microservices so that prometheus can connect with them and read their metrics with the help of actuator prometheus URL

#in internal jobList under additionalScrapeConfigs in values.yaml (this is a jobList entry example):
	    {
            "job_name": "accounts",
            "metrics_path": "/actuator/prometheus",
            "static_configs": [
              {
                "targets": ["accounts:8080"]
              }
            ]
        }

#the full list can be found here: https://github.com/eazybytes/microservices/blob/3.3.2/section_16/helm/kube-prometheus/values.yaml

#CD into the kube-prometheus folder
helm dependencies build
#CD into the helm folder (outer folder)
helm install prometheus kube-prometheus

#use port-forwarding to access prometheus(make sure that the pod is running):
echo "Prometheus URL: http://127.0.0.1:9090/"
    kubectl port-forward --namespace default svc/prometheus-kube-prometheus-prometheus 9090:9090
######################

######################PROMETHEUS changing the configuration######################
#i changed some data inside values.yaml (the indentation was wrong)
#cd into the helm chart folder with the values.yaml file
#helm upgrade prometheus <repository-name>/kube-prometheus -f values.yaml

helm upgrade prometheus bitnami/kube-prometheus -f values.yaml

######################


######################grafana-loki with bitnami helm chart######################
#loki is responsible to aggregate all the logs that are generated by each microservice
#copied the grafana-loki helm chart folder to my helm folder
#didnot change any of the configuration data

#CD into the grafana-loki folder
helm dependencies build
#CD into the helm folder (outer folder)
helm install loki grafana-loki
######################


######################grafana-tempo with bitnami helm chart######################
#copied the grafana-tempo helm chart folder to my helm folder
#in values.yaml enabled http and grpc for otlp so the open telemetry java agent that we have inside the microservices can send the tracing details to the tempo(by default otlp is disabled inside this helm chart)

#CD into the grafana-tempo folder
helm dependencies build
#CD into the helm folder (outer folder)
helm install tempo grafana-tempo

#this value is present in the values.yaml in prod-env to fill the configmap.yaml (in refrence for the grafana-tempo service)
#otelExporterEndPoint: http://tempo-grafana-tempo-distributor:4317
######################


######################grafana######################
#copied the grafana helm chart folder to my helm folder
#in values.yaml in secretDefinition added apiVersion, deleteDatasources and datasources (for Prometheus, Loki, Tempo).
#this added data can be found in https://github.com/eazybytes/microservices/blob/3.3.2/section_16/helm/grafana/values.yaml

#CD into the grafana folder
helm dependencies build
#CD into the helm folder (outer folder)
helm install grafana grafana


** Please be patient while the chart is being deployed **

1. Get the application URL by running these commands:
    echo "Browse to http://127.0.0.1:3000"
    kubectl port-forward svc/grafana 3000:3000 &

2. Get the admin credentials(in powershell):

$encodedPassword = kubectl get secret grafana-admin --namespace default -o jsonpath="{.data.GF_SECURITY_ADMIN_PASSWORD}"
$password = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($encodedPassword))
Write-Output "User: admin"
Write-Output "Password: $password"

######################

###########
#to get all the installations or deployments that we have done with helm
helm ls
###########

##################updating values/configuration of a pod##################
#make the required Changes in values.yaml (inside gatewayserver)

#to get all the installations or deployments that we have done with helm
helm ls

#go to prod-env folder then run:
helm dependencies build
#go up one folder
cd ..
#Run the following command to upgrade the gatewayserver chart within the prod-env Helm chart:
helm upgrade eazybank prod-env

#eazybank: This is the name of your Helm release.
#prod-env: helm chart folder

##################

#######################helm history and rollback#######################
#to get the helm history with the revisions of a release(eazybank):
helm history eazybank
#to rollback a release(eazybank) to a specific revision (1):
helm rollback eazybank 1
#######################


#########helm uninstall#########
#to get all the installations/deployments/releases that we have done with helm
helm ls
#to uninstall a deployment/release
helm uninstall <release-name>

#everything gets deleted except Persistent Volume Claims and Persistent Volumes
#make sure to delete the coresponding Persistent Volume Claims so it wouldnot create issues the next time when installing the helm chart.
#########

